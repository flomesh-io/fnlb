// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostConfigIpv4addressHandlerFunc turns a function with the right signature into a post config ipv4address handler
type PostConfigIpv4addressHandlerFunc func(PostConfigIpv4addressParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostConfigIpv4addressHandlerFunc) Handle(params PostConfigIpv4addressParams) middleware.Responder {
	return fn(params)
}

// PostConfigIpv4addressHandler interface for that can handle valid post config ipv4address params
type PostConfigIpv4addressHandler interface {
	Handle(PostConfigIpv4addressParams) middleware.Responder
}

// NewPostConfigIpv4address creates a new http.Handler for the post config ipv4address operation
func NewPostConfigIpv4address(ctx *middleware.Context, handler PostConfigIpv4addressHandler) *PostConfigIpv4address {
	return &PostConfigIpv4address{Context: ctx, Handler: handler}
}

/*
	PostConfigIpv4address swagger:route POST /config/ipv4address postConfigIpv4address

# Assign IPv4 addresses in the device

Assign IPv4 addresses in the device
*/
type PostConfigIpv4address struct {
	Context *middleware.Context
	Handler PostConfigIpv4addressHandler
}

func (o *PostConfigIpv4address) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostConfigIpv4addressParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
