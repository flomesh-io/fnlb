// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// DeleteConfigSessionIdentIdentHandlerFunc turns a function with the right signature into a delete config session ident ident handler
type DeleteConfigSessionIdentIdentHandlerFunc func(DeleteConfigSessionIdentIdentParams) middleware.Responder

// Handle executing the request and returning a response
func (fn DeleteConfigSessionIdentIdentHandlerFunc) Handle(params DeleteConfigSessionIdentIdentParams) middleware.Responder {
	return fn(params)
}

// DeleteConfigSessionIdentIdentHandler interface for that can handle valid delete config session ident ident params
type DeleteConfigSessionIdentIdentHandler interface {
	Handle(DeleteConfigSessionIdentIdentParams) middleware.Responder
}

// NewDeleteConfigSessionIdentIdent creates a new http.Handler for the delete config session ident ident operation
func NewDeleteConfigSessionIdentIdent(ctx *middleware.Context, handler DeleteConfigSessionIdentIdentHandler) *DeleteConfigSessionIdentIdent {
	return &DeleteConfigSessionIdentIdent{Context: ctx, Handler: handler}
}

/*
	DeleteConfigSessionIdentIdent swagger:route DELETE /config/session/ident/{ident} deleteConfigSessionIdentIdent

# Create a new Load balancer service

Create a new load balancer service with .
*/
type DeleteConfigSessionIdentIdent struct {
	Context *middleware.Context
	Handler DeleteConfigSessionIdentIdentHandler
}

func (o *DeleteConfigSessionIdentIdent) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewDeleteConfigSessionIdentIdentParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
