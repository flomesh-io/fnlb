// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cybwan/fsmxlb/api/models"
)

// GetConfigSessionAllHandlerFunc turns a function with the right signature into a get config session all handler
type GetConfigSessionAllHandlerFunc func(GetConfigSessionAllParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetConfigSessionAllHandlerFunc) Handle(params GetConfigSessionAllParams) middleware.Responder {
	return fn(params)
}

// GetConfigSessionAllHandler interface for that can handle valid get config session all params
type GetConfigSessionAllHandler interface {
	Handle(GetConfigSessionAllParams) middleware.Responder
}

// NewGetConfigSessionAll creates a new http.Handler for the get config session all operation
func NewGetConfigSessionAll(ctx *middleware.Context, handler GetConfigSessionAllHandler) *GetConfigSessionAll {
	return &GetConfigSessionAll{Context: ctx, Handler: handler}
}

/*
	GetConfigSessionAll swagger:route GET /config/session/all getConfigSessionAll

# Get all of the port interfaces

Get all of the port interfaces.
*/
type GetConfigSessionAll struct {
	Context *middleware.Context
	Handler GetConfigSessionAllHandler
}

func (o *GetConfigSessionAll) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetConfigSessionAllParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetConfigSessionAllOKBody get config session all o k body
//
// swagger:model GetConfigSessionAllOKBody
type GetConfigSessionAllOKBody struct {

	// session attr
	SessionAttr []*models.SessionEntry `json:"sessionAttr"`
}

// Validate validates this get config session all o k body
func (o *GetConfigSessionAllOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSessionAttr(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetConfigSessionAllOKBody) validateSessionAttr(formats strfmt.Registry) error {
	if swag.IsZero(o.SessionAttr) { // not required
		return nil
	}

	for i := 0; i < len(o.SessionAttr); i++ {
		if swag.IsZero(o.SessionAttr[i]) { // not required
			continue
		}

		if o.SessionAttr[i] != nil {
			if err := o.SessionAttr[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getConfigSessionAllOK" + "." + "sessionAttr" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getConfigSessionAllOK" + "." + "sessionAttr" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get config session all o k body based on the context it is used
func (o *GetConfigSessionAllOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSessionAttr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetConfigSessionAllOKBody) contextValidateSessionAttr(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.SessionAttr); i++ {

		if o.SessionAttr[i] != nil {

			if swag.IsZero(o.SessionAttr[i]) { // not required
				return nil
			}

			if err := o.SessionAttr[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getConfigSessionAllOK" + "." + "sessionAttr" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getConfigSessionAllOK" + "." + "sessionAttr" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetConfigSessionAllOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetConfigSessionAllOKBody) UnmarshalBinary(b []byte) error {
	var res GetConfigSessionAllOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
