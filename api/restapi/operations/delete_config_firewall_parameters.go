// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewDeleteConfigFirewallParams creates a new DeleteConfigFirewallParams object
//
// There are no default values defined in the spec.
func NewDeleteConfigFirewallParams() DeleteConfigFirewallParams {

	return DeleteConfigFirewallParams{}
}

// DeleteConfigFirewallParams contains all the bound params for the delete config firewall operation
// typically these are obtained from a http.Request
//
// swagger:parameters DeleteConfigFirewall
type DeleteConfigFirewallParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Destination IP in CIDR notation
	  In: query
	*/
	DestinationIP *string
	/*Maximum destination port range
	  In: query
	*/
	MaxDestinationPort *int64
	/*Maximum source port range
	  In: query
	*/
	MaxSourcePort *int64
	/*Minimum destination port range
	  In: query
	*/
	MinDestinationPort *int64
	/*Minimum source port range
	  In: query
	*/
	MinSourcePort *int64
	/*the incoming port
	  In: query
	*/
	PortName *string
	/*User preference for ordering
	  In: query
	*/
	Preference *int64
	/*the protocol
	  In: query
	*/
	Protocol *int64
	/*Source IP address
	  In: query
	*/
	SourceIP *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewDeleteConfigFirewallParams() beforehand.
func (o *DeleteConfigFirewallParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qDestinationIP, qhkDestinationIP, _ := qs.GetOK("destinationIP")
	if err := o.bindDestinationIP(qDestinationIP, qhkDestinationIP, route.Formats); err != nil {
		res = append(res, err)
	}

	qMaxDestinationPort, qhkMaxDestinationPort, _ := qs.GetOK("maxDestinationPort")
	if err := o.bindMaxDestinationPort(qMaxDestinationPort, qhkMaxDestinationPort, route.Formats); err != nil {
		res = append(res, err)
	}

	qMaxSourcePort, qhkMaxSourcePort, _ := qs.GetOK("maxSourcePort")
	if err := o.bindMaxSourcePort(qMaxSourcePort, qhkMaxSourcePort, route.Formats); err != nil {
		res = append(res, err)
	}

	qMinDestinationPort, qhkMinDestinationPort, _ := qs.GetOK("minDestinationPort")
	if err := o.bindMinDestinationPort(qMinDestinationPort, qhkMinDestinationPort, route.Formats); err != nil {
		res = append(res, err)
	}

	qMinSourcePort, qhkMinSourcePort, _ := qs.GetOK("minSourcePort")
	if err := o.bindMinSourcePort(qMinSourcePort, qhkMinSourcePort, route.Formats); err != nil {
		res = append(res, err)
	}

	qPortName, qhkPortName, _ := qs.GetOK("portName")
	if err := o.bindPortName(qPortName, qhkPortName, route.Formats); err != nil {
		res = append(res, err)
	}

	qPreference, qhkPreference, _ := qs.GetOK("preference")
	if err := o.bindPreference(qPreference, qhkPreference, route.Formats); err != nil {
		res = append(res, err)
	}

	qProtocol, qhkProtocol, _ := qs.GetOK("protocol")
	if err := o.bindProtocol(qProtocol, qhkProtocol, route.Formats); err != nil {
		res = append(res, err)
	}

	qSourceIP, qhkSourceIP, _ := qs.GetOK("sourceIP")
	if err := o.bindSourceIP(qSourceIP, qhkSourceIP, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindDestinationIP binds and validates parameter DestinationIP from query.
func (o *DeleteConfigFirewallParams) bindDestinationIP(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.DestinationIP = &raw

	return nil
}

// bindMaxDestinationPort binds and validates parameter MaxDestinationPort from query.
func (o *DeleteConfigFirewallParams) bindMaxDestinationPort(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("maxDestinationPort", "query", "int64", raw)
	}
	o.MaxDestinationPort = &value

	return nil
}

// bindMaxSourcePort binds and validates parameter MaxSourcePort from query.
func (o *DeleteConfigFirewallParams) bindMaxSourcePort(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("maxSourcePort", "query", "int64", raw)
	}
	o.MaxSourcePort = &value

	return nil
}

// bindMinDestinationPort binds and validates parameter MinDestinationPort from query.
func (o *DeleteConfigFirewallParams) bindMinDestinationPort(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("minDestinationPort", "query", "int64", raw)
	}
	o.MinDestinationPort = &value

	return nil
}

// bindMinSourcePort binds and validates parameter MinSourcePort from query.
func (o *DeleteConfigFirewallParams) bindMinSourcePort(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("minSourcePort", "query", "int64", raw)
	}
	o.MinSourcePort = &value

	return nil
}

// bindPortName binds and validates parameter PortName from query.
func (o *DeleteConfigFirewallParams) bindPortName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.PortName = &raw

	return nil
}

// bindPreference binds and validates parameter Preference from query.
func (o *DeleteConfigFirewallParams) bindPreference(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("preference", "query", "int64", raw)
	}
	o.Preference = &value

	return nil
}

// bindProtocol binds and validates parameter Protocol from query.
func (o *DeleteConfigFirewallParams) bindProtocol(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}

	value, err := swag.ConvertInt64(raw)
	if err != nil {
		return errors.InvalidType("protocol", "query", "int64", raw)
	}
	o.Protocol = &value

	return nil
}

// bindSourceIP binds and validates parameter SourceIP from query.
func (o *DeleteConfigFirewallParams) bindSourceIP(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.SourceIP = &raw

	return nil
}
