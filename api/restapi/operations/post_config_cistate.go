// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostConfigCistateHandlerFunc turns a function with the right signature into a post config cistate handler
type PostConfigCistateHandlerFunc func(PostConfigCistateParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostConfigCistateHandlerFunc) Handle(params PostConfigCistateParams) middleware.Responder {
	return fn(params)
}

// PostConfigCistateHandler interface for that can handle valid post config cistate params
type PostConfigCistateHandler interface {
	Handle(PostConfigCistateParams) middleware.Responder
}

// NewPostConfigCistate creates a new http.Handler for the post config cistate operation
func NewPostConfigCistate(ctx *middleware.Context, handler PostConfigCistateHandler) *PostConfigCistate {
	return &PostConfigCistate{Context: ctx, Handler: handler}
}

/*
	PostConfigCistate swagger:route POST /config/cistate postConfigCistate

# Informs Current Cluster Instance state in the device

Informs Current Cluster Instance state in the device
*/
type PostConfigCistate struct {
	Context *middleware.Context
	Handler PostConfigCistateHandler
}

func (o *PostConfigCistate) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostConfigCistateParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
