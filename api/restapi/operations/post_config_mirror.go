// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostConfigMirrorHandlerFunc turns a function with the right signature into a post config mirror handler
type PostConfigMirrorHandlerFunc func(PostConfigMirrorParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostConfigMirrorHandlerFunc) Handle(params PostConfigMirrorParams) middleware.Responder {
	return fn(params)
}

// PostConfigMirrorHandler interface for that can handle valid post config mirror params
type PostConfigMirrorHandler interface {
	Handle(PostConfigMirrorParams) middleware.Responder
}

// NewPostConfigMirror creates a new http.Handler for the post config mirror operation
func NewPostConfigMirror(ctx *middleware.Context, handler PostConfigMirrorHandler) *PostConfigMirror {
	return &PostConfigMirror{Context: ctx, Handler: handler}
}

/*
	PostConfigMirror swagger:route POST /config/mirror postConfigMirror

# Create a new Mirror config

Create a new Mirror config.
*/
type PostConfigMirror struct {
	Context *middleware.Context
	Handler PostConfigMirrorHandler
}

func (o *PostConfigMirror) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostConfigMirrorParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
