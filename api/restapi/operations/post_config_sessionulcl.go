// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostConfigSessionulclHandlerFunc turns a function with the right signature into a post config sessionulcl handler
type PostConfigSessionulclHandlerFunc func(PostConfigSessionulclParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostConfigSessionulclHandlerFunc) Handle(params PostConfigSessionulclParams) middleware.Responder {
	return fn(params)
}

// PostConfigSessionulclHandler interface for that can handle valid post config sessionulcl params
type PostConfigSessionulclHandler interface {
	Handle(PostConfigSessionulclParams) middleware.Responder
}

// NewPostConfigSessionulcl creates a new http.Handler for the post config sessionulcl operation
func NewPostConfigSessionulcl(ctx *middleware.Context, handler PostConfigSessionulclHandler) *PostConfigSessionulcl {
	return &PostConfigSessionulcl{Context: ctx, Handler: handler}
}

/*
	PostConfigSessionulcl swagger:route POST /config/sessionulcl postConfigSessionulcl

# Create a new session config

Create a new session config for 5G.
*/
type PostConfigSessionulcl struct {
	Context *middleware.Context
	Handler PostConfigSessionulclHandler
}

func (o *PostConfigSessionulcl) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostConfigSessionulclParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
