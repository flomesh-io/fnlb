// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// MirrorEntry mirror entry
//
// swagger:model MirrorEntry
type MirrorEntry struct {

	// Mirror name
	MirrorIdent string `json:"mirrorIdent,omitempty"`

	// mirror info
	MirrorInfo *MirrorEntryMirrorInfo `json:"mirrorInfo,omitempty"`

	// target object
	TargetObject *MirrorEntryTargetObject `json:"targetObject,omitempty"`
}

// Validate validates this mirror entry
func (m *MirrorEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMirrorInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetObject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MirrorEntry) validateMirrorInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.MirrorInfo) { // not required
		return nil
	}

	if m.MirrorInfo != nil {
		if err := m.MirrorInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mirrorInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mirrorInfo")
			}
			return err
		}
	}

	return nil
}

func (m *MirrorEntry) validateTargetObject(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetObject) { // not required
		return nil
	}

	if m.TargetObject != nil {
		if err := m.TargetObject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetObject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetObject")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mirror entry based on the context it is used
func (m *MirrorEntry) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMirrorInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetObject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MirrorEntry) contextValidateMirrorInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.MirrorInfo != nil {

		if swag.IsZero(m.MirrorInfo) { // not required
			return nil
		}

		if err := m.MirrorInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mirrorInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mirrorInfo")
			}
			return err
		}
	}

	return nil
}

func (m *MirrorEntry) contextValidateTargetObject(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetObject != nil {

		if swag.IsZero(m.TargetObject) { // not required
			return nil
		}

		if err := m.TargetObject.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetObject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetObject")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MirrorEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MirrorEntry) UnmarshalBinary(b []byte) error {
	var res MirrorEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MirrorEntryMirrorInfo mirror entry mirror info
//
// swagger:model MirrorEntryMirrorInfo
type MirrorEntryMirrorInfo struct {

	// Port where mirrored traffic needs to be sent
	Port string `json:"port,omitempty"`

	// For ERSPAN we may need to send tunnelled mirror traffic
	RemoteIP string `json:"remoteIP,omitempty"`

	// For ERSPAN we may need to send tunnelled mirror traffic
	SourceIP string `json:"sourceIP,omitempty"`

	// mirror tunnel-id. For ERSPAN we may need to send tunnelled mirror traffic
	TunnelID int64 `json:"tunnelID,omitempty"`

	// One of MirrTypeSpan, MirrTypeRspan or MirrTypeErspan
	Type int64 `json:"type,omitempty"`

	// For RSPAN we may need to send tagged mirror traffic
	Vlan int64 `json:"vlan,omitempty"`
}

// Validate validates this mirror entry mirror info
func (m *MirrorEntryMirrorInfo) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this mirror entry mirror info based on context it is used
func (m *MirrorEntryMirrorInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MirrorEntryMirrorInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MirrorEntryMirrorInfo) UnmarshalBinary(b []byte) error {
	var res MirrorEntryMirrorInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MirrorEntryTargetObject mirror entry target object
//
// swagger:model MirrorEntryTargetObject
type MirrorEntryTargetObject struct {

	// Target Attachment
	Attachment int64 `json:"attachment,omitempty"`

	// Target Names
	MirrObjName string `json:"mirrObjName,omitempty"`
}

// Validate validates this mirror entry target object
func (m *MirrorEntryTargetObject) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this mirror entry target object based on context it is used
func (m *MirrorEntryTargetObject) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MirrorEntryTargetObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MirrorEntryTargetObject) UnmarshalBinary(b []byte) error {
	var res MirrorEntryTargetObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
