// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// SessionEntry session entry
//
// swagger:model SessionEntry
type SessionEntry struct {

	// access network tunnel
	AccessNetworkTunnel *SessionEntryAccessNetworkTunnel `json:"accessNetworkTunnel,omitempty"`

	// core network tunnel
	CoreNetworkTunnel *SessionEntryCoreNetworkTunnel `json:"coreNetworkTunnel,omitempty"`

	// IP address and netmask
	Ident string `json:"ident,omitempty"`

	// IP address for nexthop
	SessionIP string `json:"sessionIP,omitempty"`
}

// Validate validates this session entry
func (m *SessionEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessNetworkTunnel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCoreNetworkTunnel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SessionEntry) validateAccessNetworkTunnel(formats strfmt.Registry) error {
	if swag.IsZero(m.AccessNetworkTunnel) { // not required
		return nil
	}

	if m.AccessNetworkTunnel != nil {
		if err := m.AccessNetworkTunnel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessNetworkTunnel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accessNetworkTunnel")
			}
			return err
		}
	}

	return nil
}

func (m *SessionEntry) validateCoreNetworkTunnel(formats strfmt.Registry) error {
	if swag.IsZero(m.CoreNetworkTunnel) { // not required
		return nil
	}

	if m.CoreNetworkTunnel != nil {
		if err := m.CoreNetworkTunnel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("coreNetworkTunnel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("coreNetworkTunnel")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this session entry based on the context it is used
func (m *SessionEntry) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAccessNetworkTunnel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCoreNetworkTunnel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SessionEntry) contextValidateAccessNetworkTunnel(ctx context.Context, formats strfmt.Registry) error {

	if m.AccessNetworkTunnel != nil {

		if swag.IsZero(m.AccessNetworkTunnel) { // not required
			return nil
		}

		if err := m.AccessNetworkTunnel.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("accessNetworkTunnel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("accessNetworkTunnel")
			}
			return err
		}
	}

	return nil
}

func (m *SessionEntry) contextValidateCoreNetworkTunnel(ctx context.Context, formats strfmt.Registry) error {

	if m.CoreNetworkTunnel != nil {

		if swag.IsZero(m.CoreNetworkTunnel) { // not required
			return nil
		}

		if err := m.CoreNetworkTunnel.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("coreNetworkTunnel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("coreNetworkTunnel")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SessionEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SessionEntry) UnmarshalBinary(b []byte) error {
	var res SessionEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SessionEntryAccessNetworkTunnel session entry access network tunnel
//
// swagger:model SessionEntryAccessNetworkTunnel
type SessionEntryAccessNetworkTunnel struct {

	// ID of the tunnel
	TeID int64 `json:"TeID,omitempty"`

	// Access network IP address
	TunnelIP string `json:"tunnelIP,omitempty"`
}

// Validate validates this session entry access network tunnel
func (m *SessionEntryAccessNetworkTunnel) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this session entry access network tunnel based on context it is used
func (m *SessionEntryAccessNetworkTunnel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SessionEntryAccessNetworkTunnel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SessionEntryAccessNetworkTunnel) UnmarshalBinary(b []byte) error {
	var res SessionEntryAccessNetworkTunnel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SessionEntryCoreNetworkTunnel session entry core network tunnel
//
// swagger:model SessionEntryCoreNetworkTunnel
type SessionEntryCoreNetworkTunnel struct {

	// ID of the tunnel
	TeID int64 `json:"teID,omitempty"`

	// Connection network IP address
	TunnelIP string `json:"tunnelIP,omitempty"`
}

// Validate validates this session entry core network tunnel
func (m *SessionEntryCoreNetworkTunnel) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this session entry core network tunnel based on context it is used
func (m *SessionEntryCoreNetworkTunnel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SessionEntryCoreNetworkTunnel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SessionEntryCoreNetworkTunnel) UnmarshalBinary(b []byte) error {
	var res SessionEntryCoreNetworkTunnel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
