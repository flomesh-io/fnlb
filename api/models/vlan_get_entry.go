// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// VlanGetEntry vlan get entry
//
// swagger:model VlanGetEntry
type VlanGetEntry struct {

	// Interface device name
	Dev string `json:"dev,omitempty"`

	// member
	Member []*VlanMemberEntry `json:"member"`

	// Vlan ID
	Vid int64 `json:"vid,omitempty"`

	// vlan statistic
	VlanStatistic *VlanGetEntryVlanStatistic `json:"vlanStatistic,omitempty"`
}

// Validate validates this vlan get entry
func (m *VlanGetEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMember(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlanStatistic(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VlanGetEntry) validateMember(formats strfmt.Registry) error {
	if swag.IsZero(m.Member) { // not required
		return nil
	}

	for i := 0; i < len(m.Member); i++ {
		if swag.IsZero(m.Member[i]) { // not required
			continue
		}

		if m.Member[i] != nil {
			if err := m.Member[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("member" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("member" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VlanGetEntry) validateVlanStatistic(formats strfmt.Registry) error {
	if swag.IsZero(m.VlanStatistic) { // not required
		return nil
	}

	if m.VlanStatistic != nil {
		if err := m.VlanStatistic.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlanStatistic")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlanStatistic")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this vlan get entry based on the context it is used
func (m *VlanGetEntry) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMember(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVlanStatistic(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VlanGetEntry) contextValidateMember(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Member); i++ {

		if m.Member[i] != nil {

			if swag.IsZero(m.Member[i]) { // not required
				return nil
			}

			if err := m.Member[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("member" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("member" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VlanGetEntry) contextValidateVlanStatistic(ctx context.Context, formats strfmt.Registry) error {

	if m.VlanStatistic != nil {

		if swag.IsZero(m.VlanStatistic) { // not required
			return nil
		}

		if err := m.VlanStatistic.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vlanStatistic")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vlanStatistic")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VlanGetEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VlanGetEntry) UnmarshalBinary(b []byte) error {
	var res VlanGetEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// VlanGetEntryVlanStatistic vlan get entry vlan statistic
//
// swagger:model VlanGetEntryVlanStatistic
type VlanGetEntryVlanStatistic struct {

	// in bytes
	InBytes int64 `json:"inBytes,omitempty"`

	// in packets
	InPackets int64 `json:"inPackets,omitempty"`

	// out bytes
	OutBytes int64 `json:"outBytes,omitempty"`

	// out packets
	OutPackets int64 `json:"outPackets,omitempty"`
}

// Validate validates this vlan get entry vlan statistic
func (m *VlanGetEntryVlanStatistic) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this vlan get entry vlan statistic based on context it is used
func (m *VlanGetEntryVlanStatistic) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VlanGetEntryVlanStatistic) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VlanGetEntryVlanStatistic) UnmarshalBinary(b []byte) error {
	var res VlanGetEntryVlanStatistic
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
