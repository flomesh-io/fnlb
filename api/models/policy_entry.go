// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// PolicyEntry policy entry
//
// swagger:model PolicyEntry
type PolicyEntry struct {

	// Policy name
	PolicyIdent string `json:"policyIdent,omitempty"`

	// policy info
	PolicyInfo *PolicyEntryPolicyInfo `json:"policyInfo,omitempty"`

	// target object
	TargetObject *PolicyEntryTargetObject `json:"targetObject,omitempty"`
}

// Validate validates this policy entry
func (m *PolicyEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePolicyInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetObject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicyEntry) validatePolicyInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.PolicyInfo) { // not required
		return nil
	}

	if m.PolicyInfo != nil {
		if err := m.PolicyInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policyInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policyInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PolicyEntry) validateTargetObject(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetObject) { // not required
		return nil
	}

	if m.TargetObject != nil {
		if err := m.TargetObject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetObject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetObject")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this policy entry based on the context it is used
func (m *PolicyEntry) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePolicyInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetObject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PolicyEntry) contextValidatePolicyInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.PolicyInfo != nil {

		if swag.IsZero(m.PolicyInfo) { // not required
			return nil
		}

		if err := m.PolicyInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("policyInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("policyInfo")
			}
			return err
		}
	}

	return nil
}

func (m *PolicyEntry) contextValidateTargetObject(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetObject != nil {

		if swag.IsZero(m.TargetObject) { // not required
			return nil
		}

		if err := m.TargetObject.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetObject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetObject")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PolicyEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicyEntry) UnmarshalBinary(b []byte) error {
	var res PolicyEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PolicyEntryPolicyInfo policy entry policy info
//
// swagger:model PolicyEntryPolicyInfo
type PolicyEntryPolicyInfo struct {

	// Policy color for QoS
	ColorAware bool `json:"colorAware,omitempty"`

	// policy type
	CommittedBlkSize int64 `json:"committedBlkSize,omitempty"`

	// policy type
	CommittedInfoRate int64 `json:"committedInfoRate,omitempty"`

	// policy type
	ExcessBlkSize int64 `json:"excessBlkSize,omitempty"`

	// policy type
	PeakInfoRate int64 `json:"peakInfoRate,omitempty"`

	// policy type
	Type int64 `json:"type,omitempty"`
}

// Validate validates this policy entry policy info
func (m *PolicyEntryPolicyInfo) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this policy entry policy info based on context it is used
func (m *PolicyEntryPolicyInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PolicyEntryPolicyInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicyEntryPolicyInfo) UnmarshalBinary(b []byte) error {
	var res PolicyEntryPolicyInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PolicyEntryTargetObject policy entry target object
//
// swagger:model PolicyEntryTargetObject
type PolicyEntryTargetObject struct {

	// Target Attachment
	Attachment int64 `json:"attachment,omitempty"`

	// Target Names
	PolObjName string `json:"polObjName,omitempty"`
}

// Validate validates this policy entry target object
func (m *PolicyEntryTargetObject) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this policy entry target object based on context it is used
func (m *PolicyEntryTargetObject) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PolicyEntryTargetObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PolicyEntryTargetObject) UnmarshalBinary(b []byte) error {
	var res PolicyEntryTargetObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
