// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MirrorGetEntry mirror get entry
//
// swagger:model MirrorGetEntry
type MirrorGetEntry struct {

	// Mirror name
	MirrorIdent string `json:"mirrorIdent,omitempty"`

	// mirror info
	MirrorInfo *MirrorGetEntryMirrorInfo `json:"mirrorInfo,omitempty"`

	// Sync - sync state
	// Required: true
	Sync *int64 `json:"sync"`

	// target object
	TargetObject *MirrorGetEntryTargetObject `json:"targetObject,omitempty"`
}

// Validate validates this mirror get entry
func (m *MirrorGetEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMirrorInfo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSync(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetObject(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MirrorGetEntry) validateMirrorInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.MirrorInfo) { // not required
		return nil
	}

	if m.MirrorInfo != nil {
		if err := m.MirrorInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mirrorInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mirrorInfo")
			}
			return err
		}
	}

	return nil
}

func (m *MirrorGetEntry) validateSync(formats strfmt.Registry) error {

	if err := validate.Required("sync", "body", m.Sync); err != nil {
		return err
	}

	return nil
}

func (m *MirrorGetEntry) validateTargetObject(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetObject) { // not required
		return nil
	}

	if m.TargetObject != nil {
		if err := m.TargetObject.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetObject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetObject")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this mirror get entry based on the context it is used
func (m *MirrorGetEntry) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMirrorInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetObject(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MirrorGetEntry) contextValidateMirrorInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.MirrorInfo != nil {

		if swag.IsZero(m.MirrorInfo) { // not required
			return nil
		}

		if err := m.MirrorInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mirrorInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mirrorInfo")
			}
			return err
		}
	}

	return nil
}

func (m *MirrorGetEntry) contextValidateTargetObject(ctx context.Context, formats strfmt.Registry) error {

	if m.TargetObject != nil {

		if swag.IsZero(m.TargetObject) { // not required
			return nil
		}

		if err := m.TargetObject.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("targetObject")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("targetObject")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MirrorGetEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MirrorGetEntry) UnmarshalBinary(b []byte) error {
	var res MirrorGetEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MirrorGetEntryMirrorInfo mirror get entry mirror info
//
// swagger:model MirrorGetEntryMirrorInfo
type MirrorGetEntryMirrorInfo struct {

	// Port where mirrored traffic needs to be sent
	Port string `json:"port,omitempty"`

	// For ERSPAN we may need to send tunnelled mirror traffic
	RemoteIP string `json:"remoteIP,omitempty"`

	// For ERSPAN we may need to send tunnelled mirror traffic
	SourceIP string `json:"sourceIP,omitempty"`

	// mirror tunnel-id. For ERSPAN we may need to send tunnelled mirror traffic
	TunnelID int64 `json:"tunnelID,omitempty"`

	// One of MirrTypeSpan, MirrTypeRspan or MirrTypeErspan
	Type int64 `json:"type,omitempty"`

	// For RSPAN we may need to send tagged mirror traffic
	Vlan int64 `json:"vlan,omitempty"`
}

// Validate validates this mirror get entry mirror info
func (m *MirrorGetEntryMirrorInfo) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this mirror get entry mirror info based on context it is used
func (m *MirrorGetEntryMirrorInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MirrorGetEntryMirrorInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MirrorGetEntryMirrorInfo) UnmarshalBinary(b []byte) error {
	var res MirrorGetEntryMirrorInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// MirrorGetEntryTargetObject mirror get entry target object
//
// swagger:model MirrorGetEntryTargetObject
type MirrorGetEntryTargetObject struct {

	// Target Attachment
	Attachment int64 `json:"attachment,omitempty"`

	// Target Names
	MirrObjName string `json:"mirrObjName,omitempty"`
}

// Validate validates this mirror get entry target object
func (m *MirrorGetEntryTargetObject) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this mirror get entry target object based on context it is used
func (m *MirrorGetEntryTargetObject) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *MirrorGetEntryTargetObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MirrorGetEntryTargetObject) UnmarshalBinary(b []byte) error {
	var res MirrorGetEntryTargetObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
